name: Build NW.js macOS Application

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NW_VERSION: "0.77.0"
  APP_NAME: "MyApp"

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
    # 1. 代码检出
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        clean: true

    # 2. 设置Node.js环境
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        cache: "npm"
        cache-dependency-path: "package-lock.json"

    # 3. 彻底清理环境
    - name: Clean workspace
      run: |
        rm -rf node_modules package-lock.json nw-cache dist
        npm cache clean --force

    # 4. 安装依赖（分阶段处理）
    - name: Install core dependencies
      run: |
        npm config set legacy-peer-deps true
        npm install nw@${{ env.NW_VERSION }} --save --legacy-peer-deps
        npm install extract-zip@2.0.1 adm-zip@0.5.10 axios@1.6.2 --save-dev --legacy-peer-deps

    # 5. 生成正确的lock文件
    - name: Create proper lockfile
      run: npm install --package-lock-only --ignore-scripts

    # 6. 构建应用
    - name: Build application
      run: |
        # 确保缓存目录存在
        mkdir -p nw-cache
        
        # 下载NW.js运行时
        curl -L "https://dl.nwjs.io/v${{ env.NW_VERSION }}/nwjs-v${{ env.NW_VERSION }}-osx-x64.zip" \
          -o "nw-cache/nwjs-v${{ env.NW_VERSION }}-osx-x64.zip" || (echo "Download failed" && exit 1)
        
        # 解压运行时
        unzip "nw-cache/nwjs-v${{ env.NW_VERSION }}-osx-x64.zip" -d nw-cache/ || (echo "Extraction failed" && exit 1)
        
        # 准备应用包
        mkdir -p dist/${{ env.APP_NAME }}.app/Contents/{MacOS,Resources}
        cp -R "nw-cache/nwjs-v${{ env.NW_VERSION }}-osx-x64/nwjs.app/Contents/MacOS" "dist/${{ env.APP_NAME }}.app/Contents/"
        cp "nw-cache/nwjs-v${{ env.NW_VERSION }}-osx-x64/nwjs.app/Contents/Info.plist" "dist/${{ env.APP_NAME }}.app/Contents/"
        
        # 打包应用文件
        zip -r "dist/${{ env.APP_NAME }}.app/Contents/Resources/app.nw" package.json index.html *.js *.css

        # 创建DMG
        hdiutil create \
          -volname "${{ env.APP_NAME }}" \
          -srcfolder "dist/${{ env.APP_NAME }}.app" \
          -ov -format UDZO \
          "dist/${{ env.APP_NAME }}.dmg" || (echo "DMG creation failed" && exit 1)

    # 7. 验证构建结果
    - name: Verify build artifacts
      run: |
        echo "Generated files:"
        ls -lh dist/
        
        if [ ! -f "dist/${{ env.APP_NAME }}.dmg" ]; then
          echo "Error: DMG file not found!"
          exit 1
        fi
        
        if [ ! -d "dist/${{ env.APP_NAME }}.app" ]; then
          echo "Error: App bundle not found!"
          exit 1
        fi

    # 8. 上传构建产物
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-macOS
        path: |
          dist/${{ env.APP_NAME }}.app
          dist/${{ env.APP_NAME }}.dmg
        retention-days: 7

    # 9. 创建发布（仅tag触发）
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/${{ env.APP_NAME }}.dmg
          dist/${{ env.APP_NAME }}.app.zip
        draft: false
        prerelease: false
        body: "NW.js application built from ${{ github.ref }}"